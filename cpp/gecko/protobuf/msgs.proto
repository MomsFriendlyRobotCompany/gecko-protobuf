syntax = "proto3";

// package nav_msgs;
// import "proto/vector.proto";
// import "pygecko/proto/standard_msgs.proto";

// message pose_st {
//     standard_msgs.Vector position = 1;
//     standard_msgs.Quaternion orientation = 2;
//     double timestamp = 3;
// }


// Std ----------------------------------------------
message Vector {
    double x = 1;
    double y = 2;
    double z = 3;
}

message Quaternion {
    double w = 1;
    double x = 2;
    double y = 3;
    double z = 4;
}

message Twist {
    Vector linear = 1;
    Vector angular = 2;
}

message Wrench {
    Vector force = 1;
    Vector torque = 2;
}

message Transform {
    Vector translation = 1;
    Quaternion rotation = 2;
}

// Nav ----------------------------------------------

message Pose {
    double timestamp = 1;  // unix time
    Vector position = 2;
    Quaternion orientation = 3;
}

message Odometry {
    double timestamp = 1;  // unix time
    Pose pose = 2;
    Twist twist = 3;
    string frame_id = 4;
}

message OccupancyGrid {
    double timestamp = 1;  // unix time
    float resolution = 2;  // m/cell
    uint32 width = 3;      // cells
    uint32 height = 4;     // cells
    Pose origin = 5;  // [m,m,rad] real-world
    bytes data = 6;  // occupancy [0,100], unknown -1
}

message Path {
    double timestamp = 1;  // unix time
    repeated Pose poses = 2;
}

// Sensor ---------------------------------------------

message Imu {
    double timestamp = 1;  // unix timestamp
    Vector linear_acceleration = 2;  // m/s^2
    Vector angular_velocity = 3;  // rads/sec
    Quaternion orientation = 4;
    Vector magnetic_field = 5;  // Tesla
}

message ImuInfo {
    repeated double orientation_covariance = 1;
    repeated double angular_velocity_covariance = 2;
    repeated double linear_acceleration_covariance = 3;
    repeated double magnetic_field_covariance = 4;
}

message Image {
    uint32 width = 1;
    uint32 height = 2;
    uint32 depth = 3;      // 1 or 3
    bool compressed = 4;   // true or false
    string encoding = 5;   // jpeg or png
    bytes data = 6;        // image array
    double timestamp = 7;  // unix timestamp
}

message CameraInfo {
    double timestamp = 1;  // unix timestamp
    uint32 height = 2;
    uint32 width = 3;
    // distortion = k1, k2, t1, t2, k3
    repeated double D = 4 [packed=true];  //
    // Intrinsic camera matrix for the raw (distorted) images.
    //     [fx  0 cx]
    // K = [ 0 fy cy]
    //     [ 0  0  1]
    repeated double K = 5 [packed=true];
    // Rectification matrix (stereo cameras only)
    repeated double R = 6 [packed=true];
    // Projection/camera matrix
    //     [fx'  0  cx' Tx]
    // P = [ 0  fy' cy' Ty]
    //     [ 0   0   1   0]
    repeated double P = 7 [packed=true];
}

message LaserPt {
    double angle = 1;
    double range = 2;
    double intensity = 3;
}

message LaserScan {
    double timestamp = 1;  // unix timestamp
    double angle_increment = 2;
    double range_min = 3;
    double range_max = 4;
    repeated double range = 5 [packed=true];
    repeated double intensity = 6 [packed=true];
    repeated LaserPt points = 7;
}

message NavSatFix {
    enum Status {
        FIX = 0;
        SBASFIX = 1;
        GBASFIX = 2;
        NOFIX = 3;
    }
    enum Service {
        UNKNOWN = 0;
        GPS = 1;
        GLONASS = 2;
        COMPASS = 4;
        GALILEO = 8;
    }
    double timestamp = 1;  // unix timestamp
    double latitude = 2;
    double longitude = 3;
    double altitude = 4;
    Status status = 5;
    Service service = 6;
}

message BatteryState {
    enum Technology {
        NIMH = 0;
        LION = 1;
        LIPO = 2;
        LIFE = 3;
        NICD = 4;
        LIMN = 5;
    }
    enum Status {
        UNKNOWN = 0;
        CHARGING = 1;
        DISCHARGING = 2;
        NOT_CHARGING = 3;
        FULL = 4;
    }
    double timestamp = 1;  // unix timestamp
    float voltage = 2;   // volts
    float current = 3;   // amps
    float charge = 4;    // Ahr
    float capacity = 5;  // Ahr
    Technology technology = 6;
    Status status = 7;
}

message Range {
    enum Type {
        ULTRASOUND = 0;
        IR = 1;
        LIDAR = 2;
    }
    double timestamp = 1;  // unix timestamp
    Type type = 2;
    float fov = 3;
    float range_min = 4;
    float range_max = 5;
    float range = 6;
}
